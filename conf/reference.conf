play {

  modules {
    enabled += "play.api.db.DBModule"
    enabled += "play.api.db.HikariCPModule"
    #play.modules.enabled+="play.api.mvc.LegacyCookiesModule"
  #   enabled += "play.filters.csrf.CSRFModule"
   # enabled += "play.filters.cors.CORSModule"
   # enabled += "play.filters.headers.SecurityHeadersModule"
   # enabled += "play.filters.hosts.AllowedHostsModule"
   # enabled += "play.filters.gzip.GzipFilterModule"
   # enabled += "play.filters.https.RedirectHttpsModule"
  }

  play.filters {

    # Default list of enabled filters, configured by play.api.http.EnabledFilters
    enabled += play.filters.csrf.CSRFFilter
    enabled += play.filters.headers.SecurityHeadersFilter
//    enabled += play.filters.hosts.AllowedHostsFilter

    # CSRF config
    csrf {

      # Token configuration
      token {
        # The token name
        name = "csrfToken"

        # Whether tokens should be signed or not
        sign = true
      }

      # Cookie configuration
      cookie {
        # If non null, the CSRF token will be placed in a cookie with this name
        name = null

        # Whether the cookie should be set to secure
        secure = ${play.http.session.secure}

        # Whether the cookie should have the HTTP only flag set
        httpOnly = false
      }

      # How much of the body should be buffered when looking for the token in the request body
      body.bufferSize = ${play.http.parser.maxMemoryBuffer}

      # Bypass the CSRF check if this origin is trusted by the CORS filter
      bypassCorsTrustedOrigins = true

      # Header configuration
      header {

        # The name of the header to accept CSRF tokens from.
        name = "Csrf-Token"


        # Defines headers that must be present to perform the CSRF check. If any of these headers are present, the CSRF
        # check will be performed.
        #
        # By default, we only perform the CSRF check if there are Cookies or an Authorization header.
        # Generally, CSRF attacks use a user's browser to execute requests on the client's behalf. If the user does not
        # have an active session, there is no danger of this happening.
        #
        # Setting this to null or an empty object will protect all requests.
        protectHeaders {
          Cookie = "*"
          Authorization = "*"
        }

        # Defines headers that can be used to bypass the CSRF check if any are present. A value of "*" simply
        # checks for the presence of the header. A string value checks for a match on that string.
        bypassHeaders {}
      }

      # Method lists
      method {
        # If non empty, then requests will be checked if the method is not in this list.
        whiteList = ["GET", "HEAD", "OPTIONS"]

        # The black list is only used if the white list is empty.
        # Only check methods in this list.
        blackList = []
      }

      # Content type lists
      # If both white lists and black lists are empty, then all content types are checked.
      contentType {
        # If non empty, then requests will be checked if the content type is not in this list.
        whiteList = []

        # The black list is only used if the white list is empty.
        # Only check content types in this list.
        blackList = []
      }

      routeModifiers {
        # If non empty, then requests will be checked if the route does not have this modifier. This is how we enable the
        # nocsrf modifier, but you may choose to use a different modifier (such as "api") if you plan to check the
        # modifier in your code for other purposes.
        whiteList = ["nocsrf"]

        # If non empty, then requests will be checked if the route contains this modifier
        # The black list is used only if the white list is empty
        blackList = []
      }

      # The error handler.
      # Used by Play's built in DI support to locate and bind a request handler.  Must be one of the following:
      # - A FQCN that implements play.filters.csrf.CSRF.ErrorHandler (Scala).
      # - A FQCN that implements play.filters.csrf.CSRFErrorHandler (Java).
      # - provided, indicates that the application has bound an instance of play.filters.csrf.CSRF.ErrorHandler through some
      #   other mechanism.
      # If null, will attempt to load a class called CSRFErrorHandler in the root package, otherwise if that's
      # not found, will default to play.filters.csrf.CSRF.CSRFHttpErrorHandler, which delegates to the configured
      # HttpRequestHandler.
      errorHandler = null
    }

    # Security headers filter configuration
    headers {

      # The X-Frame-Options header. If null, the header is not set.
      frameOptions = "DENY"

      # The X-XSS-Protection header. If null, the header is not set.
      xssProtection = "1; mode=block"

      # The X-Content-Type-Options header. If null, the header is not set.
      contentTypeOptions = "nosniff"

      # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
      permittedCrossDomainPolicies = "master-only"

      # The Content-Security-Policy header. If null, the header is not set.
      contentSecurityPolicy = "default-src 'self'"

      # The Referrer-Policy header. If null, the header is not set.
      referrerPolicy = "origin-when-cross-origin, strict-origin-when-cross-origin"

      # If true, allow an action to use .withHeaders to replace one or more of the above headers
      allowActionSpecificHeaders = false
    }

    # Allowed hosts filter configuration
    hosts {

      # A list of valid hosts (e.g. "example.com") or suffixes of valid hosts (e.g. ".example.com")
      # Note that ".example.com" will match example.com and any subdomain of example.com, with or without a trailing dot.
      # "." matches all domains, and "" matches an empty or nonexistent host.
      allowed = ["localhost", ".local"]
    }

    # CORS filter configuration
    cors {

      # The path prefixes to filter.
      pathPrefixes = ["/"]

      # The allowed origins. If null, all origins are allowed.
      allowedOrigins = null

      # The allowed HTTP methods. If null, all methods are allowed
      allowedHttpMethods = null

      # The allowed HTTP headers. If null, all headers are allowed.
      allowedHttpHeaders = null

      # The exposed headers
      exposedHeaders = []

      # Whether to support credentials
      supportsCredentials = true

      # The maximum amount of time the CORS meta data should be cached by the client
      preflightMaxAge = 1 hour

      # Whether to serve forbidden origins as non-CORS requests
      serveForbiddenOrigins = false
    }

    # GZip filter configuration
    gzip {

      # The buffer size to use for gzipped bytes
      bufferSize = 8k

      # The maximum amount of content to buffer for gzipping in order to calculate the content length before falling back
      # to chunked encoding.
      chunkedThreshold = 100k

      contentType {

        # If non empty, then a response will only be compressed if its content type is in this list.
        whiteList = []

        # The black list is only used if the white list is empty.
        # Compress all responses except the ones whose content type is in this list.
        blackList = []
      }
    }

    # Configuration for redirection to HTTPS and Strict-Transport-Security
    https {

      # A boolean defining whether the redirect to HTTPS is enabled.
      # A value of null means enabled only in Prod mode, but disabled in Dev/Test.
      redirectEnabled = null

      # The Strict-Transport-Security header is used to signal to browsers to always use https.
      # This header is added whenever the filter makes the redirect.
      # Set to null to disable the header.
      strictTransportSecurity = "max-age=31536000; includeSubDomains"

      # Configures the redirect status code used if the request is not secure.
      # By default, uses HTTP status code 308, which is a permanent redirect that does
      # not change the HTTP method according to [RFC 7238](https://tools.ietf.org/html/rfc7538).
      redirectStatusCode = 308

      # The HTTPS port to use in the Redirect's Location URL.
      # e.g. port = 9443 results in https://playframework.com:9443/some/url
      port = null
      port = ${?play.server.https.port} # default to same HTTPS port as play server
      port = ${?https.port} # read https.port system property if provided explicitly
    }
  }


  # Database configuration
  db {
    # The name of the configuration item from which to read database config.
    # So, if set to db, means that db.default is where the configuration for the
    # database named default is found.
    config = "db"

    # The name of the default database, used when no database name is explicitly
    # specified.
    default = "default"

    # The default connection pool.
    # Valid values are:
    #  - default - Use the default connection pool provided by the platform (HikariCP)
    #  - hikaricp - Use HikariCP
    #  - bonecp - Use BoneCP
    #  - A FQCN to a class that implements play.api.db.ConnectionPool
    pool = "bonecp"

    # The prototype for database configuration
    prototype = {

      # The connection pool for this database.
      # Valid values are:
      #  - default - Delegate to play.db.pool
      #  - hikaricp - Use HikariCP
      #  - bonecp - Use BoneCP
      #  - A FQCN to a class that implements play.api.db.ConnectionPool
      pool = "bonecp"

      # The database driver
      driver = com.mysql.jdbc.Driver

      # The database url
      url = "jdbc:mysql://109.203.117.163:3306/db_matrimony"

      # The username
      username = usr_matrimony

      # The password
      password = "Cs09uk0$#312"

      # If non null, binds the JNDI name to this data source to the given JNDI name.
      jndiName = matri

      # If it should log sql statements
      logSql = false

      # HikariCP configuration options
      hikaricp {

        # The datasource class name, if not using a URL
        dataSourceClassName = null

        # Data source configuration options
        dataSource {
        }

        # Whether autocommit should be used
        autoCommit = true

        # The connection timeout
        connectionTimeout = 30 seconds

        # The idle timeout
        idleTimeout = 10 minutes

        # The max lifetime of a connection
        maxLifetime = 30 minutes

        # If non null, the query that should be used to test connections
        connectionTestQuery = null

        # If non null, sets the minimum number of idle connections to maintain.
        minimumIdle = null

        # The maximum number of connections to make.
        maximumPoolSize = 10

        # If non null, sets the name of the connection pool. Primarily used for stats reporting.
        poolName = null

        # This property controls whether the pool will "fail fast" if the pool cannot be seeded with
        # an initial connection successfully.
        # 1. Any positive number is taken to be the number of milliseconds to attempt to acquire an initial connection;
        #    the application thread will be blocked during this period. If a connection cannot be acquired before this
        #    timeout occurs, an exception will be thrown. This timeout is applied after the connectionTimeout period.
        # 2. If the value is zero (0), HikariCP will attempt to obtain and validate a connection. If a connection
        #    is obtained, but fails validation, an exception will be thrown and the pool not started. However, if
        #    a connection cannot be obtained, the pool will start, but later efforts to obtain a connection may fail.
        # 3. A value less than zero will bypass any initial connection attempt, and the pool will start immediately
        #    while trying to obtain connections in the background. Consequently, later efforts to obtain a connection
        #    may fail.
        initializationFailTimeout = 1

        # Sets whether or not construction of the pool should fail if the minimum number of connections
        # couldn't be created.
        # Deprecated value in HikariCP, initializationFailTimeout should be used instead.
        # This configuration value is optional, so commenting it out removes the runtime warning from HikariCP.
        #initializationFailFast = true

        # Sets whether internal queries should be isolated
        isolateInternalQueries = false

        # Sets whether pool suspension is allowed.  There is a performance impact to enabling it.
        allowPoolSuspension = false

        # Sets whether connections should be read only
        readOnly = false

        # Sets whether mbeans should be registered
        registerMbeans = false

        # If non null, sets the catalog that should be used on connections
        catalog = null

        # A SQL statement that will be executed after every new connection creation before adding it to the pool
        connectionInitSql = null

        # If non null, sets the transaction isolation level
        transactionIsolation = null

        # The validation timeout to use
        validationTimeout = 5 seconds

        # If non null, sets the threshold for the amount of time that a connection has been out of the pool before it is
        # considered to have leaked
        leakDetectionThreshold = null
      }

      # BoneCP configuration options
      bonecp {

        # Whether autocommit should be used
        autoCommit = true

        # If non null, the transaction isolation level to use.
        isolation = null

        # If non null, sets the catolog to use
        defaultCatalog = null

        # Whether the database should be treated as read only
        readOnly = false

        # Whether opened statements should be automatically closed
        closeOpenStatements = true

        # The pool partition count
        partitionCount = 1

        # The maximum number of connections per partition
        maxConnectionsPerPartition = 30

        # The minimum number of connections per partition
        minConnectionsPerPartition = 5

        # The increment to acquire connections in
        acquireIncrement = 1

        # The acquire retry attempts
        acquireRetryAttempts = 10

        # The delay to wait before retrying to acquire a connection
        acquireRetryDelay = 1 second

        # The connection timeout
        connectionTimeout = 1 second

        # The idle age to expire connections
        idleMaxAge = 10 minutes

        # The maximum a connection should live for
        maxConnectionAge = 1 hour

        # Whether JMX reporting should be disabled
        disableJMX = true

        # Whether statistics should be kept
        statisticsEnabled = false

        # How frequently idle connections should be tested
        idleConnectionTestPeriod = 1 minute

        # Disable connection tracking
        disableConnectionTracking = true

        # The time limit for executing queries. 0 means no time limit.
        queryExecuteTimeLimit = 0

        # Whether the connection should be reset when closed
        resetConnectionOnClose = false

        # Whether unresolved transactions should be detected
        detectUnresolvedTransactions = false

        # An SQL statement to execute to test if a connection is ok after it is created.
        # Null turns this feature off.
        initSQL = null

        # An SQL statement to execute to test if a connection is ok before giving it out of the pool.
        # Null turns this feature off.
        connectionTestStatement = null

        # Whether SQL statements should be logged
        logStatements = false
      }
    }
  }
}
